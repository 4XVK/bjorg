#!/usr/bin/env bash
#
# This script kickstarts the build process for a basic server instance.
#
# OS: debian 10
# INSTALLS:
#   - unattended-upgrades
#   - build-essential
#   - supervisor

# Make sure args are supplied
if [ $# -eq 0 ]
  then
    err "ERR | -FQDN -HOSTNAME -SSH_PORT -CERTBOT_EMAIL"
    exit 1
fi

FQDN=$1
HOSTNAME=$2
SSH_PORT=$3
CERTBOT_EMAIL=$4
PASSWORD=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 63)

apt-get update && apt-get -y upgrade
apt-get install -y unattended-upgrades build-essential git


# Get public ipv6/4 on eth0
ipv6_raw_public=$(/sbin/ip -o -6 addr show eth0 | sed -e 's/^.*inet6 \([^ ]\+\).*/\1/')
ipv4_raw_public=$(/sbin/ip -o -4 addr show eth0 | sed -e 's/^.*inet \([^ ]\+\).*/\1/')
ipv6_public=${ipv6_raw_public%%/*}
ipv4_public=${ipv4_raw_public%%/*}

# Add public entries to /etc/hosts
echo "$HOSTNAME" > /etc/hostname
cat <<EOT >> /etc/hosts

# public entries
$ipv6_public $HOSTNAME.$FQDN $HOSTNAME
$ipv4_public $HOSTNAME.$FQDN $HOSTNAME
EOT

# Create a user because
adduser "$HOSTNAME" --gecos "" --disabled-password
adduser "$HOSTNAME" sudo
echo "$HOSTNAME":"$PASSWORD" | chpasswd

# Give user an sshkey, some initial dirs
mkdir /home/"$HOSTNAME"/.ssh /home/"$HOSTNAME"/.bjorg
cp -a /root/.ssh/. /home/"$HOSTNAME"/.ssh/
# Leave pw crumb for superuser needs
echo "$PASSWORD" > /home/"$HOSTNAME"/.bjorg/auth
chown -R "$HOSTNAME":"$HOSTNAME" /home/"$HOSTNAME"/.ssh /home/"$HOSTNAME"/.bjorg

# Lock SSH access down
file=/etc/ssh/sshd_config
sed -i 's/#Port .*/Port '"$SSH_PORT"'/' $file
sed -i 's/#AddressFamily .*/#AddressFamily inet/' $file
sed -i 's/PermitRootLogin .*/PermitRootLogin no/' $file
sed -i 's/#PasswordAuthentication .*/PasswordAuthentication no/' $file

# Edit ipv4/6 templates add SSH_PORT
sed -i 's/PORTGOESHERE/'"$SSH_PORT"'/g' templates/ip4tables
sed -i 's/PORTGOESHERE/'"$SSH_PORT"'/g' templates/ip4tables_web
sed -i 's/PORTGOESHERE/'"$SSH_PORT"'/g' templates/ip6tables
sed -i 's/PORTGOESHERE/'"$SSH_PORT"'/g' templates/ip6tables_web

# Activate firewall rules with web access, then make persistent
awk '1' templates/ip4tables_web | iptables-restore
awk '1' templates/ip6tables_web | ip6tables-restore

# config for
echo iptables-persistent iptables-persistent/autosave_v4 boolean true | debconf-set-selections
echo iptables-persistent iptables-persistent/autosave_v6 boolean true | debconf-set-selections
apt-get install -y iptables-persistent

# Install nginx and setup default site
apt-get install -y nginx
cat templates/nginx.default > /etc/nginx/sites-available/default
sed -i 's/server_name _.*/server_name '"$FQDN"';/' /etc/nginx/sites-available/default
cat templates/index.html > /var/www/html/index.html
service nginx stop
service nginx start

# Install certbot for ssl
# Try for --hsts and --uir even though they aren't currently supported with the nginx module
apt-get install -y certbot python-certbot-nginx
certbot -n --agree-tos --email "$CERTBOT_EMAIL" --authenticator webroot -w /var/www/html/ --installer nginx --redirect --hsts --uir --domain "$FQDN"

# Install and setup postgresql with a password accessible account
apt-get install -y postgresql postgresql-contrib
echo postgres:"$PASSWORD" | chpasswd

# Use the system postgres user to create a database user
# who can log in with a password.
echo "$PASSWORD" | sudo -s -u postgres <<EOF
psql -c "CREATE USER $HOSTNAME WITH PASSWORD '$PASSWORD'"
psql -c "ALTER USER $HOSTNAME WITH SUPERUSER CREATEDB CREATEROLE"
psql -c "ALTER ROLE $HOSTNAME SET client_encoding TO 'utf8'"
EOF

reboot
